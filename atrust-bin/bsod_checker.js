const Common=require("./common");const Protocal=require("./protocal");const Log=require(".././service/util/logger");const assert=require("assert");const checker=require("./util/checker");const Rpc=require("./util/rpc_client");class BsodChecker{constructor(){this.log_tag="[bsod_checker]"}getBsodCheckResult(t){let e=new Rpc.RpcClient(Rpc.aTrustTunnelService);Log.info(this.log_tag,"Detection aTrustTunnel RPC getBsodCheckResult start");return e.startPromise().then(e=>{return e.getBsodCheckResultPromise()}).then(e=>{Log.info(this.log_tag,`Detection aTrustTunnel RPC getBsodCheckResult success, the response is ${e}`);t(e);return e}).catch(e=>{Log.error(this.log_tag,"Detection aTrustTunnel RPC getBsodCheckResult failure",e);t(false,e);throw e}).finally(()=>{ e.destroy(); Log.info(this.log_tag,"Detection aTrustTunnel RPC getBsodCheckResult finish"); })}forceStartNetfltDriver(t){let e=new Rpc.RpcClient(Rpc.aTrustTunnelService);Log.info(this.log_tag,"Detection aTrustTunnel RPC forceStartNetfltDriver start");return e.startPromise().then(e=>{return e.forceStartNetfltDriverPromise()}).then(e=>{Log.info(this.log_tag,`Detection aTrustTunnel RPC forceStartNetfltDriver success, the response is ${e}`);t(e);return e}).catch(e=>{Log.error(this.log_tag,"Detection aTrustTunnel RPC forceStartNetfltDriver failure",e);t(false,e);throw e}).finally(()=>{ e.destroy(); Log.info(this.log_tag,"Detection aTrustTunnel RPC forceStartNetfltDriver finish"); })}}module.exports=new BsodChecker;process.on('unhandledRejection', (reason, p) => {
    console.log('Promise: ', p, 'Reason: ', reason)
    // do something
})
